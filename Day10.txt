Allocate Books :
int func(vector<int> &arr , int n , int pages){
    int stu = 1;
    long long sum =0;
    for(int i= 0 ;i < n ;i++){
        if(sum + arr[i] <= pages) sum += arr[i];
        else{
            stu+=1;
            sum = arr[i];
        }
    }
    return stu;
}


int findPages(vector<int>& arr, int n, int m) {
    if(m>n ) return -1;
     int l = *max_element(arr.begin(),arr.end());
     int h = accumulate(arr.begin(),arr.end(),0);
     while(l<=h){
         int mid = (l+h)/2;
         int stu = func(arr,n,mid);
         if(stu > m) l = mid+1;
         else h = mid -1 ;

     }
     return l;
}

Koko Eating Bananas :
class Solution {
public:
    int findMax(vector<int> &v) {
    int maxi = INT_MIN;
    int n = v.size();
    //find the maximum:
    for (int i = 0; i < n; i++) {
        maxi = max(maxi, v[i]);
    }
    return maxi;
}

long long calculateTotalHours(vector<int> &v, int hourly) {
   long long totalH = 0;
    int n = v.size();
    //find total hours:
    for (int i = 0; i < n; i++) {
        totalH += ceil((double)(v[i]) / (double)(hourly));
    }
    return totalH;
}

int minEatingSpeed(vector<int> v, int h) {
    int low = 1, high = findMax(v);

    //apply binary search:
    while (low <= high) {
        long long mid = (static_cast<long long>(high) - low) / 2 + low;

        int totalH = calculateTotalHours(v, mid);
        if (totalH <= h) {
            high = mid - 1;
        }
        else {
            low = mid + 1;
        }
    }
    return low;
}

};