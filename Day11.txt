Painter's Partition :
int solve(vector<int> &boards,int mid){
    int cnt =1;
    int sum =0;
    for(int i=0;i<boards.size();i++){
        if(sum+boards[i] <= mid)
        {
            sum += boards[i];
        }
        else{
            cnt++;
            sum = boards[i];
        }
    }
    return cnt;
}

int findLargestMinDistance(vector<int> &boards, int k)
{
    int l = *max_element(boards.begin(),boards.end());
    int h = accumulate(boards.begin(),boards.end(),0);
    while(l<=h){
        int mid =l+(h-l)/2;
        if(solve(boards,mid) <= k)
        h = mid-1;
        else l = mid+1;
    }
    return l;
}


First Missing Positive :
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();
        int i=0;
        while(i<n){
            if(nums[i] >0 && nums[i] <= n && nums[nums[i]-1]!= nums[i] )
                swap(nums[i],nums[nums[i]-1]);
            else 
                i++;
        }
        for(int i=0;i<n;i++){
            if(nums[i] != i+1)
                return i+1;
        }
        return n+1;
    }
};
