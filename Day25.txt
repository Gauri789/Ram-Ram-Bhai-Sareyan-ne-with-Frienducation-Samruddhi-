BT preorder Traversal :
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
       func(ans,root);
       return ans;
    }
    void func(vector<int>& ans,TreeNode *root){
         if(root==NULL)
        {
        return  ;
           
        }
      ans.push_back(root->val);
      func(ans,root->left);
       func(ans,root->right);
    }
};
BT level order traversal :
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans ;
        if(root == NULL)
            return ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
        vector<int> temp;
        int n = q.size();
            for(int i=0;i<n;i++){
                TreeNode* flag = q.front();
                q.pop();
                temp.push_back(flag->val);
                if(flag->left) q.push(flag->left);
                if(flag->right) q.push(flag->right);
                
            }
            ans.push_back(temp);
        }
        return ans;
    }
};