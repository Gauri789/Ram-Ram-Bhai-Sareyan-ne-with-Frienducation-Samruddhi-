Unique Paths || :
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) {
            // If starting or ending point is an obstacle, no path is possible
            return 0;
        }

        vector<vector<int>> dp(m, vector<int>(n, 0));

        dp[0][0] = 1;  // Starting point

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (obstacleGrid[i][j] == 1) {
                    // If current cell is an obstacle, skip
                    continue;
                }

                if (i > 0) {
                    dp[i][j] += dp[i - 1][j];
                }
                if (j > 0) {
                    dp[i][j] += dp[i][j - 1];
                }
            }
        }

        return dp[m - 1][n - 1];
    }
};
--------------------------------------
Triangle :
class Solution {
public:
    int find(int i,int j,vector<vector<int>>& triangle,int n,vector<vector<int>>& dp){
        
        if(i==n-1) return triangle[n-1][j];
        if(dp[i][j] != -1) return dp[i][j];
        int d = triangle[i][j]+find(i+1,j,triangle,n,dp);
        int dia = triangle[i][j]+find(i+1,j+1,triangle,n,dp);
        return dp[i][j]= min(d,dia);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        
        int n = triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return find(0,0,triangle,n,dp);
    }
    
};
